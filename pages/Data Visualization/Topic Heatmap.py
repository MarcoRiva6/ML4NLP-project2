import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import os
import pickle
from sklearn.decomposition import LatentDirichletAllocation
from sklearn.feature_extraction.text import TfidfVectorizer

models_path = './models'
data_path = './Traduction avis clients'

# Function to load pre-trained LDA model (replace with your loading logic)
@st.cache_resource
def load_lda_model():
    # Replace this with your own loading logic for the LDA model and associated data
    with open(os.path.join(models_path, 'lda_model.pkl'), "rb") as file:
        lda = pickle.load(file)
    return lda

# Function to load terms and topic labels
@st.cache_data
def load_terms_and_labels():

    df = pd.read_pickle(os.path.join(data_path, 'dataset_cleaned.pkl'))

    # Replace with your logic to load feature names (terms) and topic labels
    vectorizer = TfidfVectorizer(max_df=0.9, min_df=2)  # Adjust for French stopwords
    tfidf_matrix = vectorizer.fit_transform(df['avis'])

    # Get feature names
    terms = vectorizer.get_feature_names_out()
    topic_labels = {
        1: "Policy Claims",
        2: "Satisfaction and Pricing",
        3: "Service Experience",
        4: "Contracts and Policy Management",
    }
    return terms, topic_labels

# Streamlit App
st.title("Topic Modeling Visualization")
st.write("This app visualizes the topics generated by an LDA model, displaying the most significant terms for each topic using a heatmap.")

# Load LDA model, terms, and labels
lda = load_lda_model()
terms, topic_labels = load_terms_and_labels()

# Number of topics
num_topics = len(topic_labels)

# Create DataFrame for heatmap
heatmap_data = pd.DataFrame(
    lda.components_,
    index=[f"{topic_labels[i+1]}" for i in range(num_topics)],
    columns=terms,
)

# Select the number of top terms per topic to display
top_n = st.slider("Select the number of top terms per topic:", min_value=5, max_value=20, value=10)

# Filter heatmap data to show only top terms per topic
top_terms_per_topic = heatmap_data.apply(lambda x: x.nlargest(top_n), axis=1)

# Heatmap visualization
st.write("### Heatmap of Topics and Top Words")
fig, ax = plt.subplots(figsize=(12, 8))
sns.heatmap(top_terms_per_topic.T, annot=False, cmap='Blues', cbar=True, ax=ax)
ax.set_title("Heatmap of Topics and Top Words", fontsize=16)
ax.set_xlabel("Topics")
ax.set_ylabel("Top Terms")
st.pyplot(fig)

# Display raw data if the user wants to see it
if st.checkbox("Show raw data"):
    st.write("### Raw Heatmap Data")
    st.dataframe(heatmap_data)